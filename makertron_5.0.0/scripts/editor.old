	// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Editor module 
	// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	'use strict'

	import React from 'react';
	import ReactDOM from 'react-dom';
	import { Cell , Grid , FABButton , Icon , IconButton , Button , Textfield , Slider,DataTable , TableHeader} from 'react-mdl';

	import styles from './style.js' 
	import shared from './shared.js' 

	import AceEditor from 'react-ace'
	//import 'brace/mode/javascript'
	//import 'brace/theme/github'

	
	// --------------------------------------------------------
	// Fetch project data from server and load up editor 
	// --------------------------------------------------------
	module.exports = React.createClass({
    displayName: 'EditorComponent',	
		getInitialState: function() {
    	return { page : '' };
  	},
		updateField( type , hash , value) { 
			this.props.data[1].forEach(function(jsn){
				jsn.object.forEach(function(obj){
					if ( hash === obj.hash	) { 	
						if ( type === "Editor" ) { 
							obj.code = value 
						}			  		
					}  									
				}) 				
			}) 
		},
		refreshData() {
			this.props.patronus.updateData( this.props.data )	 
		},
		componentWillMount() { 
			var _this = this
			var editor_rows = [] 
			this.props.data[1].forEach(function(jsn){
				jsn.object.forEach(function(obj){
					editor_rows.push( <EditorNode patronus={_this} key={shared.makeId()} obj={obj}/> )	
				})					
			})
			this.setState({page: editor_rows });
		},
		render() {
    	return (
					<div>
						<button style={styles.button} type="button" id="update" onClick={this.refreshData}>Update</button>
						<div style={styles.scroller}>{this.state.page}</div>
					</div>
    	);
  	}
	});
	
	// -------------------------------------------------
	// Wrapper for react ace component 
	// -------------------------------------------------
	var TextWidget = React.createClass({	
		getInitialState: function() {
    	 return {};
  	},	
		onFocusLeave: function(event) {	// updata data
		},
		onEnter : function(event) {	// updata data
		},
		onChange(text) { 
			this.props.patronus.onChange( text , this.props.hash )
		},
		render() {
    	return (
				<AceEditor
									key={shared.makeId()}
									id={this.props.hash}
    							name={this.props.hash}
    							setOptions={{vScrollBarAlwaysVisible:true}}
									value={this.props.text}
									onChange={this.onChange}
									height={this.props.height}
									editorProps={{$blockScrolling:Infinity}}
									style={styles.ace_editor}
 							/>
			)
  	}
	}); 

	// -------------------------------------------------
	// Build a simple editable node widget 
	// ------------------------------------------------
	var EditorNode = React.createClass({
		getInitialState: function() {
    	 return { rows:[] }
  	},	
		decodeBase64(text) { 
			var head = "[@base64>"
			var tail = "<base64@]"
			var a = text.substr(0,head.length);  
			var b = text.substr(text.length-tail.length,text.length) 
			if ( a === head && b === tail ) { 
				return Base64.decode(text.substr( head.length , text.length-tail.length-head.length )) 
			}
			else { 
				return text			
			}		
		},
		encode_base64(str) { 
			return "[@base64>"+Base64.encode(str)+"<base64@]"
		},
		onChange(text,hash) {
			this.props.patronus.updateField( "Editor" , hash , this.encode_base64(text))
		},
		componentWillMount() {
			var i = 0			
			var heading = ""
			var rows = [] 
			var item = [] 
			var keys =  Object.keys(this.props.obj)
			var keys_length = keys.length; 	
			for ( i = 0; i < keys_length; i++ ) { 
				if ( keys[i] == 'type' ) { 
					heading = this.props.obj[keys[i]] 											
				}
				else if ( keys[i] === 'code' ) {
					var text = this.props.obj[keys[i]]
					if ( keys[i] === 'code' ) text = this.decodeBase64(text)
					var text_length = (text.split('\n')).length 
					var height = 12*text_length.toString()+"px"
				
					 
					item = [ <TextWidget
															key={shared.makeId()}
															hash={this.props.obj.hash}
    												  text={text}
															height={height}
															patronus={this}
 										 /> ]
					 
				}	
				else if ( keys[i] === 'hash' ) { // hash fields hidden 
					item = [] 	
				}			
				else { 		
					var text = this.props.obj[keys[i]]
					var text_length = (text.split('\n')).length 
					var height = 12*text_length.toString()+"px"	 
					item = [ <TextWidget
															key={shared.makeId()}
															hash={keys[i]+this.props.obj.hash}
    												  text={text}
															height={height}
														  patronus={this}
 										 /> ] 	
					item=[]		
						 	
				}	
				if ( item.length != 0 ) { 
					var r =  [{type: keys[i] , content: item} ]
					rows.push( 
						<DataTable nohead={false} key={shared.makeId()} shadow={0} rows={r} style={{width:'100%'}}>
						  <TableHeader name="type" tooltip="">{heading}</TableHeader>
						  <TableHeader name="content" tooltip=""></TableHeader>
						</DataTable>
					)				
				}
			} 

			this.setState({rows: rows})
			
		},
		render() {
    	return (
				<div key={shared.makeId()}>
        	{this.state.rows}
    		</div>
    	);
  	}
	});

